<?php

namespace Pumukit\EncoderBundle\Repository;

use Doctrine\ODM\MongoDB\Repository\DocumentRepository;
use Pumukit\EncoderBundle\Document\Job;

/**
 * JobRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends DocumentRepository
{
    public function createQueryWithStatus(array $status, ?array $sort = [])
    {
        $qb = $this->createQueryBuilder()
            ->field('status')->in($status);

        if (null !== $sort) {
            $qb->sort($sort);
        }

        return $qb;
    }

    public function findWithStatus(array $status, ?array $sort = [])
    {
        return $this->createQueryWithStatus($status, $sort)
            ->getQuery()
            ->execute()
        ;
    }

    public function countWithStatus(array $status, ?array $sort = [])
    {
        return $this->createQueryWithStatus($status, $sort)
            ->count()
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * Find all jobs with given status.
     *
     * @param mixed      $sort
     * @param mixed|null $owner
     */
    public function findWithStatusAndOwner(array $status, $sort = [], $owner = null)
    {
        return $this->createQueryWithStatusAndOwner($status, $sort, $owner)
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * Find all jobs with given status.
     *
     * @param mixed      $sort
     * @param mixed|null $owner
     */
    public function createQueryWithStatusAndOwner(array $status, $sort = [], $owner = null)
    {
        if (null === $owner) {
            throw new \Exception("Owner can't be null");
        }

        $qb = $this->createQueryBuilder()
            ->field('status')->in($status)
            ->field('email')->equals($owner->getEmail());

        if (null !== $sort) {
            $qb->sort($sort);
        }

        return $qb;
    }

    /**
     * Find the job with higher priority with given status.
     */
    public function findHigherPriorityWithStatus(array $status)
    {
        return $this->createQueryBuilder()
            ->field('status')->in($status)
            ->sort('priority', 'desc')
            ->sort('timeini', 'asc')
            ->getQuery()
            ->getSingleResult()
        ;
    }

    /**
     * Find not finished jobs with given multimedia object id.
     *
     * @param mixed $mmId
     */
    public function findNotFinishedByMultimediaObjectId($mmId)
    {
        return $this->createQueryBuilder()
            ->field('mm_id')->equals($mmId)
            ->field('status')->notEqual(Job::STATUS_FINISHED)
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * Find all jobs with given status and multimedia object id.
     *
     * @param mixed $status
     * @param mixed $multimediaObjectId
     */
    public function findByStatusAndMultimediaObjectId($status, $multimediaObjectId)
    {
        return $this->createQueryBuilder()
            ->field('mm_id')->equals($multimediaObjectId)
            ->field('status')->equals($status)
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * Find all jobs with given multimedia object id.
     *
     * @param mixed $multimediaObjectId
     */
    public function findByMultimediaObjectId($multimediaObjectId)
    {
        return $this->createQueryBuilder()
            ->field('mm_id')->equals($multimediaObjectId)
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * Find all jobs with given multimedia object id and profile.
     *
     * @param mixed $multimediaObjectId
     * @param mixed $profile
     */
    public function findByMultimediaObjectIdAndProfile($multimediaObjectId, $profile)
    {
        return $this->createQueryBuilder()
            ->field('mm_id')->equals($multimediaObjectId)
            ->field('profile')->equals($profile)
            ->getQuery()
            ->execute()
        ;
    }
}
