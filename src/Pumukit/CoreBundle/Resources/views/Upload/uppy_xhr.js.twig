const uppy = new Uppy.Core({
    autoProceed: false,
    allowMultipleUploads: false,
    debug: true,
    restrictions: {
        minFileSize: convertSizeToBytes("{{ inbox_min_file_size() }}"),
        maxFileSize: convertSizeToBytes("{{ inbox_max_file_size() }}"),
        maxNumberOfFiles: 1,
        allowedFileTypes: ['audio/*','video/*']
    },
    onBeforeFileAdded:  (currentFile) => {
        if (currentFile) {
            $('#pumukitnewadmin_track_ok_button').prop('disabled', false);
            $('#pumukitwizard_track_next_button').prop('disabled', false);
        }
    }
})

uppy.use(Uppy.Form, {
    target: formElement,
    getMetaFromForm: true,
    addResultToForm: true,
    multipleResults: false,
    submitOnSuccess: false,
    triggerUploadOnSubmit: false
})

uppy.use(Uppy.FileInput, {
    target: '.UppyForm',
    replaceTargetContent: true
})

uppy.use(Uppy.StatusBar, {
    target: '.UppyInput-Progress',
    hideUploadButton: true,
    hideAfterFinish: false
})

uppy.use(Uppy.XHRUpload, {
    endpoint: "{{ pathToUpload }}",
    formData: true,
    method: 'post',
    fieldName: 'resource[]',
    limit: 10,
    timeout: 1800000
});

uppy.on('file-added', (file) => {
    show_file_added(file);
    if(uppy.getFiles().length > 1) {
        uppy.removeAll();
    }
})

uppy.on('upload-error', (file, error, response) => {
    if (error.isNetworkError) {
        file_data_clear();
        alert(error)
    }
})

uppy.on('restriction-failed', (file, error) => {
    alert(error);
})

uppy.on('upload-success', (file, response) => {
    if(response.uploaded && response.uploaded === 'success') {
        if ('endPage' in response) {
            window.location.href =  response.endPage;
        }
        if ('window' in parent && 'mmId' in  response.body) {
            parent.window.postMessage({'mmId':  response.body.mmId}, '*');
        }
    } else {
        file_data_clear();
        window.alert(' {{ "ERROR!!"|trans }}\n\n' + ' file couldnt  uploaded');
        return false;
    }
})

$('#uppy-remove-file').on('click', function(event) {
    event.preventDefault();

    $('#pumukitnewadmin_track_ok_button').prop('disabled', true);
    $('#pumukitwizard_track_next_button').prop('disabled', true);

    uppy.removeFile($(this).data('file-id'));
    uppy.cancelAll();

    $('.file-data').hide();
    $('.file-title').html('');
    $('.file-size').html('');
})

function show_file_added(file)
{
    $('.file-data').show();
    $('.file-title').html(file.name);

    var fileSize = (file.size / 1024 / 1024).toFixed(2);
    var fileSizeMessage = fileSize + ' MB';
    $('.file-size').html(fileSizeMessage);

    $('#uppy-remove-file').data('file-id', file.id);
}

function file_data_clear() {
    uppy.cancelAll();
    $('.file-data').hide();
    $('.file-title').html('');
    $('.file-size').html('');
}

function convertSizeToBytes(size)
{
    if(size.indexOf('GB') !== -1) {
        return parseInt(size.replace("GB","")) * 1024 * 1024 * 1024;
    }

    if(size.indexOf('MB') !== -1) {
        return parseInt(size.replace("MB","")) * 1024 * 1024;
    }

    return 1024*1024*1024;
}
